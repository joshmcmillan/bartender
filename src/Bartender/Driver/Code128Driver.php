<?php

namespace Bartender\Driver;

/**
 * @todo  Refactor this whole class, it's a clusterf*ck
 */
class Code128Driver extends \Bartender\Driver
{
	
	protected $data, $type;

	protected $stop = '11000111010';
	protected $terminate = '11';

	protected $encodings = array(

		0 => '11011001100', 1 => '11001101100', 2 => '11001100110',
		3 => '10010011000', 4 => '10010001100', 5 => '10001001100',
		6 => '10011001000', 7 => '10011000100', 8 => '10001100100',
		9 => '11001001000', 10 => '11001000100', 11 => '11000100100',
		12 => '10110011100', 13 => '10011011100', 14 => '10011001110',
		15 => '10111001100', 16 => '10011101100', 17 => '10011100110',
		18 => '11001110010', 19 => '11001011100', 20 => '11001001110',
		21 => '11011100100', 22 => '11001110100', 23 => '11101101110',
		24 => '11101001100', 25 => '11100101100', 26 => '11100100110',
		27 => '11101100100', 28 => '11100110100', 29 => '11100110010',
		30 => '11011011000', 31 => '11011000110', 32 => '11000110110',
		33 => '10100011000', 34 => '10001011000', 35 => '10001000110',
		36 => '10110001000', 37 => '10001101000', 38 => '10001100010',
		39 => '11010001000', 40 => '11000101000', 41 => '11000100010',
		42 => '10110111000', 43 => '10110001110', 44 => '10001101110',
		45 => '10111011000', 46 => '10111000110', 47 => '10001110110',
		48 => '11101110110', 49 => '11010001110', 50 => '11000101110',
		51 => '11011101000', 52 => '11011100010', 53 => '11011101110',
		54 => '11101011000', 55 => '11101000110', 56 => '11100010110',
		57 => '11101101000', 58 => '11101100010', 59 => '11100011010',
		60 => '11101111010', 61 => '11001000010', 62 => '11110001010',
		63 => '10100110000', 64 => '10100001100', 65 => '10010110000',
		66 => '10010000110', 67 => '10000101100', 68 => '10000100110',
		69 => '10110010000', 70 => '10110000100', 71 => '10011010000',
		72 => '10011000010', 73 => '10000110100', 74 => '10000110010',
		75 => '11000010010', 76 => '11001010000', 77 => '11110111010',
		78 => '11000010100', 79 => '10001111010', 80 => '10100111100',
		81 => '10010111100', 82 => '10010011110', 83 => '10111100100',
		84 => '10011110100', 85 => '10011110010', 86 => '11110100100',
		87 => '11110010100', 88 => '11110010010', 89 => '11011011110',
		90 => '11011110110', 91 => '11110110110', 92 => '10101111000',
		93 => '10100011110', 94 => '10001011110', 95 => '10111101000',
		96 => '10111100010', 97 => '11110101000', 98 => '11110100010',
		99 => '10111011110', 100 => '10111101110', 101 => '11101011110',
		102 => '11110101110', 103 => '11010000100', 104 => '11010010000',
		105 => '11010011100'
	
	);

	protected $values = array(

		'A' => array(

			0 => " ",      1 => "!",        2 => "\"",
			3 => "#",       4 => "$",        5 => "%",
			6 => "&",       7 => "'",        8 => "(",
			9 => ")",       10 => "*",       11 => "+",
			12 => ",",      13 => "-",       14 => ".",
			15 => "/",      16 => "0",       17 => "1",
			18 => "2",      19 => "3",       20 => "4",
			21 => "5",      22 => "6",       23 => "7",
			24 => "8",      25 => "9",       26 => ":",
			27 => ";",      28 => "<",       29 => "=",
			30 => ">",      31 => "?",       32 => "@",
			33 => "A",      34 => "B",       35 => "C",
			36 => "D",      37 => "E",       38 => "F",
			39 => "G",      40 => "H",       41 => "I",
			42 => "J",      43 => "K",       44 => "L",
			45 => "M",      46 => "N",       47 => "O",
			48 => "P",      49 => "Q",       50 => "R",
			51 => "S",      52 => "T",       53 => "U",
			54 => "V",      55 => "W",       56 => "X",
			57 => "Y",      58 => "Z",       59 => "[",
			60 => "\\",     61 => "]",       62 => "^",
			63 => "_",      64 => "\000",    65 => "\001",
			66 => "\002",   67 => "\003",    68 => "\004",
			69 => "\005",   70 => "\006",    71 => "\a",
			72 => "\b",     73 => "\t",      74 => "\n",
			75 => "\v",     76 => "\f",      77 => "\r",
			78 => "\016",   79 => "\017",    80 => "\020",
			81 => "\021",   82 => "\022",    83 => "\023",
			84 => "\024",   85 => "\025",    86 => "\026",
			87 => "\027",   88 => "\030",    89 => "\031",
			90 => "\032",   91 => "\e",      92 => "\034",
			93 => "\035",   94 => "\036",    95 => "\037",
			96 => "\303",   97 => "\302",    98 => "SHIFT",
			99 => "\307",   100 => "\306",   101 => "\304",
			102 => "\301",  103 => "STARTA", 104 => "STARTB",
			105 => "STARTC"
		
		),

		'B' => array(

			0 => " ", 1 => "!", 2 => "\"", 3 => "#", 4 => "$", 5 => "%",
			6 => "&", 7 => "'", 8 => "(", 9 => ")", 10 => "*", 11 => "+",
			12 => ",", 13 => "-", 14 => ".", 15 => "/", 16 => "0", 17 => "1",
			18 => "2", 19 => "3", 20 => "4", 21 => "5", 22 => "6", 23 => "7",
			24 => "8", 25 => "9", 26 => ":", 27 => ";", 28 => "<", 29 => "=",
			30 => ">", 31 => "?", 32 => "@", 33 => "A", 34 => "B", 35 => "C",
			36 => "D", 37 => "E", 38 => "F", 39 => "G", 40 => "H", 41 => "I",
			42 => "J", 43 => "K", 44 => "L", 45 => "M", 46 => "N", 47 => "O",
			48 => "P", 49 => "Q", 50 => "R", 51 => "S", 52 => "T", 53 => "U",
			54 => "V", 55 => "W", 56 => "X", 57 => "Y", 58 => "Z", 59 => "[",
			60 => "\\", 61 => "]", 62 => "^", 63 => "_", 64 => "`", 65 => "a",
			66 => "b", 67 => "c", 68 => "d", 69 => "e", 70 => "f", 71 => "g",
			72 => "h", 73 => "i", 74 => "j", 75 => "k", 76 => "l", 77 => "m",
			78 => "n", 79 => "o", 80 => "p", 81 => "q", 82 => "r", 83 => "s",
			84 => "t", 85 => "u", 86 => "v", 87 => "w", 88 => "x", 89 => "y",
			90 => "z", 91 => "{", 92 => "|", 93 => "}", 94 => "~", 95 => "\177",
			96 => "\303", 97 => "\302", 98 => "SHIFT", 99 => "\307", 100 => "\304",
			101 => "\305", 102 => "\301", 103 => "STARTA", 104 => "STARTB",
			105 => "STARTC"

		),

		'C' => array(

			0 => "00", 1 => "01", 2 => "02", 3 => "03", 4 => "04", 5 => "05",
			6 => "06", 7 => "07", 8 => "08", 9 => "09", 10 => "10", 11 => "11",
			12 => "12", 13 => "13", 14 => "14", 15 => "15", 16 => "16", 17 => "17",
			18 => "18", 19 => "19", 20 => "20", 21 => "21", 22 => "22", 23 => "23",
			24 => "24", 25 => "25", 26 => "26", 27 => "27", 28 => "28", 29 => "29",
			30 => "30", 31 => "31", 32 => "32", 33 => "33", 34 => "34", 35 => "35",
			36 => "36", 37 => "37", 38 => "38", 39 => "39", 40 => "40", 41 => "41",
			42 => "42", 43 => "43", 44 => "44", 45 => "45", 46 => "46", 47 => "47",
			48 => "48", 49 => "49", 50 => "50", 51 => "51", 52 => "52", 53 => "53",
			54 => "54", 55 => "55", 56 => "56", 57 => "57", 58 => "58", 59 => "59",
			60 => "60", 61 => "61", 62 => "62", 63 => "63", 64 => "64", 65 => "65",
			66 => "66", 67 => "67", 68 => "68", 69 => "69", 70 => "70", 71 => "71",
			72 => "72", 73 => "73", 74 => "74", 75 => "75", 76 => "76", 77 => "77",
			78 => "78", 79 => "79", 80 => "80", 81 => "81", 82 => "82", 83 => "83",
			84 => "84", 85 => "85", 86 => "86", 87 => "87", 88 => "88", 89 => "89",
			90 => "90", 91 => "91", 92 => "92", 93 => "93", 94 => "94", 95 => "95",
			96 => "96", 97 => "97", 98 => "98", 99 => "99", 100 => "\306", 101 => "\305",
			102 => "\301", 103 => "STARTA", 104 => "STARTB", 105 => "STARTC"			

		)

	);

	public function __construct($data, $type = 'A')
	{

		if($type != 'A' and $type !== 'B' and $type !== 'C')
		{

			throw new \Bartender\Exception('Code 128 type must be either A, B or C.');

		}

		$this->type   = $type;
		$this->values = array_flip($this->values[$type]);
		$this->data   = $data;

	}

	public function encoding()
	{

		return $this->startEncoding() . $this->dataEncoding() . $this->checksumEncoding() . $this->stopEncoding();

	}

	protected function startNumber()
	{

		return $this->values['START' . $this->type];

	}

	protected function startEncoding()
	{

		return $this->encodings[$this->startNumber()];

	}

	protected function dataEncoding()
	{

		$encoded = '';

		foreach($this->numbers() as $number)
		{

			$encoded .= $this->encodings[$number];

		}

		return $encoded;

	}

	protected function checksumEncoding()
	{

		$numbers = $this->numbers();
		array_unshift($numbers, $this->startNumber());

		$weight = 1;
		$sum    = 0;
		$sticky = false;

		foreach($numbers as $number) {

			$sum += ($number * $weight);
			
			if($weight != 1 or $sticky == true) {

				++$weight;

			}
			else {

				$sticky = true;

			}

		}

		$sum = $sum % 103;

		return $this->encodings[$sum];

	}

	protected function stopEncoding()
	{

		return $this->stop . $this->terminate;

	}

	protected function characters()
	{

		return str_split($this->data);

	}

	protected function numbers() 
	{

		$characters = $this->characters();

		foreach($characters as &$character)
		{

			if(!array_key_exists($character, $this->values))
			{

				throw new \Bartender\Exception('Invalid character supplied for Code 128' . $this->type . ' barcode (' . $character . ')');

			}

			$character = $this->values[$character];

		}

		return $characters;

	}

}